# No trigger

# All variables are set in vars.yml, so they can be used across pipelines
variables:
- template: vars.yml

stages:
  - stage: BuildPlan
    jobs:
      - job: BuildPlan
        displayName: 'Build and Plan infrastructure'  
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            fetchDepth: 1

          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '0.12.26'
            displayName: 'Install Terraform 0.12.26'

          - task: TerraformTaskV1@0
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: 'paaslab/terraform'
              backendServiceArm: ${{ variables.ServiceName }}
              backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
              backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
              backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
              backendAzureRmKey: ${{ variables.backendAzureRmKey }}

          - task: TerraformTaskV1@0
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: 'paaslab/terraform'
              commandOptions: '-out $(Build.BuildId).tfplan'
              environmentServiceNameAzureRM: '${{ variables.ServiceName }}'

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: 'paaslab/terraform'
              includeRootFolder: false
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tgz'
              replaceExistingArchive: true
            displayName: 'Create Plan Artifact'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
            displayName: 'Publish Plan Artifact'


##########  DEPLOY STAGE   ###########################
  - stage: Deploy
    jobs:
      - deployment: Deploy
        displayName: 'Deploy infrastructure'
        pool:
          vmImage: 'ubuntu-latest'
        environment: EXP-PaaS
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none

                - task: DownloadBuildArtifacts@0
                  inputs:
                    artifactName: 'drop'
                  displayName: 'Download Plan Artifact'

                - task: ExtractFiles@1
                  inputs:
                    archiveFilePatterns: '$(System.ArtifactsDirectory)/drop/$(Build.BuildId).tgz'
                    destinationFolder: '$(System.DefaultWorkingDirectory)/'
                    cleanDestinationFolder: false
                  displayName: 'Extract Plan Artifact'

                - task: TerraformInstaller@0
                  inputs:
                    terraformVersion: '0.12.26'
                  displayName: 'Install Terraform 0.12.26'

                - task: TerraformTaskV1@0
                  displayName: 'Terraform Apply'
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    workingDirectory: '$(System.DefaultWorkingDirectory)'
                    commandOptions: '$(Build.BuildId).tfplan'
                    environmentServiceNameAzureRM: '${{ variables.ServiceName }}'

                - task: CmdLine@2
                  displayName: 'Terraform Output'
                  inputs:
                    script: terraform output
                    workingDirectory: '$(System.DefaultWorkingDirectory)'