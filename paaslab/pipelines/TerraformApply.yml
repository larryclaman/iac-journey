# No trigger



# All variables are set in vars.yml, so they can be used across pipelines
variables:
- template: vars.yml


stages:
  - stage: BuildPlan
    jobs:
      - job: BuildPlan

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self
      fetchDepth: 1

    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.12.26'
      displayName: 'Install Terraform 0.12.26'

    - task: CopyFiles@2
      displayName: 'Copy terraform files to working directory'
      inputs:
        SourceFolder: 'paaslab/terraform'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/Terraform'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(Build.ArtifactStagingDirectory)/Terraform'
        backendServiceArm: ${{ variables.ServiceName }}
        backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
        backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
        backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
        backendAzureRmKey: ${{ variables.backendAzureRmKey }}

    - task: TerraformTaskV1@0
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(Build.ArtifactStagingDirectory)/Terraform'
        environmentServiceNameAzureRM: ${{ variables.ServiceName }}

    - task: TerraformTaskV1@0
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(Build.ArtifactStagingDirectory)/Terraform'
        environmentServiceNameAzureRM: ${{ variables.ServiceName }}

    - task: CmdLine@2
      displayName: 'Terraform Output'
      inputs:
        script: terraform output
        workingDirectory: '$(Build.ArtifactStagingDirectory)/Terraform'

