# No trigger



# All variables are set in vars.yml, so they can be used across pipelines
variables:
- template: vars.yml


stages:
  - stage: BuildPlan
    jobs:
      - job: BuildPlan
        displayName: 'Build and Plan infrastructure'  
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            fetchDepth: 1

          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '0.12.26'
            displayName: 'Install Terraform 0.12.26'

# working dir should be paaslab/terraform
#          - task: CopyFiles@2
#            displayName: 'Copy terraform files to working directory'
#            inputs:
#              SourceFolder: 'paaslab/terraform'
#              Contents: '**'
#              TargetFolder: '$(Build.ArtifactStagingDirectory)/Terraform'

          - task: TerraformTaskV1@0
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: 'paaslab/terraform'
              backendServiceArm: ${{ variables.ServiceName }}
              backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
              backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
              backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
              backendAzureRmKey: ${{ variables.backendAzureRmKey }}

          - task: TerraformTaskV1@0
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: 'paaslab/terraform'
              commandOptions: '-out=$(BUILD_BUILDNUMBER).tfplan'
              environmentServiceNameAzureRM: '${{ variables.ServiceName }}'

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: 'paaslab/terraform'
              includeRootFolder: false
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tgz'
              replaceExistingArchive: true
            displayName: 'Create Plan Artifact'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
            displayName: 'Publish Plan Artifact'

