
name: 2 - Build and Deploy

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  Build:
    # strategy:
    #   matrix:
    #     configuration: [Debug, Release]

    #runs-on: windows-latest  
    runs-on: self-hosted


    env:
      # Solution_Name: your-solution-name                         # Replace with your solution name, i.e. MyWpfApp.sln.
      # Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      # Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      # Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
      #
      DOTNET_HOST_PATH: 'dotnet.exe'  # fixes bug #1894
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      WORK_PATH: ${{ github.workspace }}\paaslab\code


    steps:
    # deal with npm weirdness
    # - run: |
    #     if ( test-path -path "${{env.WORK_PATH}}\ClientApp\node_modules" -PathType Container) {
    #       mkdir ${{ github.workspace }}\empty -erroraction silentlycontinue
    #       robocopy ${{ github.workspace }}\empty "${{env.WORK_PATH}}\ClientApp\node_modules" /purge
    #       exit 0
    #     }
    #     #&cmd.exe /c rd /s /q "${{env.WORK_PATH}}\ClientApp\node_modules"
    #     #Get-ChildItem -Path "${{env.WORK_PATH}}\ClientApp\node_modules" -Recurse | Remove-Item -Force -Recurse
    #     # remove-item ${{env.WORK_PATH}}\ClientApp\node_modules  -force -recurse # -erroraction silentlycontinue
    #   name: Clean npm cache

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        clean: true

    - name: Use Nuget 4.4.1
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '4.4.1'
        # nuget-api-key: ${{ secrets.NuGetAPIKey }}

    - uses: actions/cache@v2   # see https://github.com/actions/cache/blob/master/examples.md#c---nuget
      name: Cache Nuget
      id: cache
      with:
        path: ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-


    # - run: echo "DATEKEY=$(get-date -format o)" >> $env:GITHUB_ENV 
    # - run: echo $env:GITHUB_ENV
    # - run: type $env:GITHUB_ENV
    # - run: echo ${{env.DATEKEY}}
    # - uses: actions/cache@v2   # see https://github.com/actions/cache/blob/master/examples.md#c---nuget
    #   name: Cache code
    #   id: cachecode
    #   with:
    #     path: |
    #       ${{ github.workspace }}\paaslab\code\obj
    #       ${{ github.workspace }}\paaslab\code\bin
    #       ${{ github.workspace }}\paaslab\code\ClientApp
    #     #key: ${{ runner.os }}-code-${{ hashFiles('**/tailspintoysweb.csproj') }}
    #     key: ${{ runner.os }}-code-${{env.DATEKEY}}
    #     restore-keys: |
    #       ${{ runner.os }}-code-



    - uses: actions/setup-node@v2
      with:
        node-version: '10'   

    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '2.2.x' # SDK Version to use; x will use the latest version of the 3.1 channel

    - run: nuget restore  ${{env.WORK_PATH}}\tailspintoysweb.csproj

    # - name: dotnet build
    #   run: dotnet build .\paaslab\code\tailspintoysweb.csproj -c release -o out 

    - name: dotnet publish
      run: dotnet publish .\paaslab\code\tailspintoysweb.csproj -c release -o publish

    - name: Upload webproject artifact
      uses: actions/upload-artifact@v2
      with:
        name: webproject
        path: ${{env.WORK_PATH}}/publish/ # or path/to/artifact


  DeployToDev:
    needs: Build
    runs-on: windows-latest  
    env:
      AZURE_WEBAPP_NAME: 'tailspintoys-paaslab-1-site'
      AZURE_WEBAPP_PACKAGE_PATH: 'webproject'


    steps:
      - uses: actions/download-artifact@v2
        with:
          name: webproject
          path: ${{env.AZURE_WEBAPP_PACKAGE_PATH}}
      - run: dir ${{env.AZURE_WEBAPP_PACKAGE_PATH}} -name 

      # Deploy to Azure Web apps
      - name: 'Run Azure webapp deploy action using publish profile credentials'
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{ env.AZURE_WEBAPP_NAME }} # Replace with your app name
          package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}




##########################
    # # Install the .NET Core workload
    # - name: Install .NET Core
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: 5.0.x

    # # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    # - name: Setup MSBuild.exe
    #   uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16

    # # Execute all unit tests in the solution
    # - name: Execute unit tests
    #   run: dotnet test

    # # Restore the application to populate the obj folder with RuntimeIdentifiers
    # - name: Restore the application
    #   run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
    #   env:
    #     Configuration: ${{ matrix.configuration }}

    # # Decode the base 64 encoded pfx and save the Signing_Certificate
    # - name: Decode the pfx
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #     $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # # Create the app package by building and packaging the Windows Application Packaging project
    # - name: Create the app package
    #   run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #   env:
    #     Appx_Bundle: Always
    #     Appx_Bundle_Platforms: x86|x64
    #     Appx_Package_Build_Mode: StoreUpload
    #     Configuration: ${{ matrix.configuration }}

    # # Remove the pfx
    # - name: Remove the pfx
    #   run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    # # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: MSIX Package
    #     path: ${{ env.Wap_Project_Directory }}\AppPackages
