
name: 2 - Build and Deploy

on:
  workflow_dispatch:
  push:
    branches: [ '*' ]
    paths:
      - paaslab/code/**
      - .github/workflows/webproject.yml
  pull_request:
    branches: [ master ]
    paths:
      - paaslab/code/**
      - .github/workflows/webproject.yml

jobs:

  Build:
    # strategy:
    #   matrix:
    #     configuration: [Debug, Release]

    runs-on: windows-latest  
    #runs-on: self-hosted


    env:
      # Solution_Name: your-solution-name                         # Replace with your solution name, i.e. MyWpfApp.sln.
      # Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      # Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      # Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
      #
      DOTNET_HOST_PATH: 'dotnet.exe'  # fixes bug #1894
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      WORK_PATH: ${{ github.workspace }}\paaslab\code


    steps:
    # deal with npm weirdness
    # - run: |
    #     if ( test-path -path "${{env.WORK_PATH}}\ClientApp\node_modules" -PathType Container) {
    #       mkdir ${{ github.workspace }}\empty -erroraction silentlycontinue
    #       robocopy ${{ github.workspace }}\empty "${{env.WORK_PATH}}\ClientApp\node_modules" /purge
    #       exit 0
    #     }
    #     #&cmd.exe /c rd /s /q "${{env.WORK_PATH}}\ClientApp\node_modules"
    #     #Get-ChildItem -Path "${{env.WORK_PATH}}\ClientApp\node_modules" -Recurse | Remove-Item -Force -Recurse
    #     # remove-item ${{env.WORK_PATH}}\ClientApp\node_modules  -force -recurse # -erroraction silentlycontinue
    #   name: Clean npm cache

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        clean: true

    - name: Use Nuget 4.4.1
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '4.4.1'
        # nuget-api-key: ${{ secrets.NuGetAPIKey }}

    - uses: actions/cache@v2   # see https://github.com/actions/cache/blob/master/examples.md#c---nuget
      name: Cache Nuget
      id: cache
      with:
        path: ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-


    # - run: echo "DATEKEY=$(get-date -format o)" >> $env:GITHUB_ENV 
    # - run: echo $env:GITHUB_ENV
    # - run: type $env:GITHUB_ENV
    # - run: echo ${{env.DATEKEY}}
    # - uses: actions/cache@v2   # see https://github.com/actions/cache/blob/master/examples.md#c---nuget
    #   name: Cache code
    #   id: cachecode
    #   with:
    #     path: |
    #       ${{ github.workspace }}\paaslab\code\obj
    #       ${{ github.workspace }}\paaslab\code\bin
    #       ${{ github.workspace }}\paaslab\code\ClientApp
    #     #key: ${{ runner.os }}-code-${{ hashFiles('**/tailspintoysweb.csproj') }}
    #     key: ${{ runner.os }}-code-${{env.DATEKEY}}
    #     restore-keys: |
    #       ${{ runner.os }}-code-



    - uses: actions/setup-node@v2
      with:
        node-version: '10'   

    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '2.2.x' # SDK Version to use; x will use the latest version of the 3.1 channel

    - run: nuget restore  ${{env.WORK_PATH}}\tailspintoysweb.csproj

    # - name: dotnet build
    #   run: dotnet build .\paaslab\code\tailspintoysweb.csproj -c release -o out 

    - name: dotnet publish
      run: dotnet publish .\paaslab\code\tailspintoysweb.csproj -c release -o publish

    - name: Upload webproject artifact
      uses: actions/upload-artifact@v2
      with:
        name: webproject
        path: ${{env.WORK_PATH}}/publish/ # or path/to/artifact


  DeployToDev:
    needs: Build
    # only run if this is master branch, or branch name starts with 'feature-'
    if: (github.ref == 'refs/heads/master') || startsWith( github.ref, 'refs/heads/feature-' )
    runs-on: windows-latest  
    env:
      AZURE_WEBAPP_NAME: 'tailspintoys-paaslab-0-site'
      AZURE_WEBAPP_PACKAGE_PATH: 'webproject'

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: webproject
          path: ${{env.AZURE_WEBAPP_PACKAGE_PATH}}
#      - run: dir ${{env.AZURE_WEBAPP_PACKAGE_PATH}} -name 

# Azure login requires a cred in the form:
# {
#   "appId": "guid",
#   "displayName": "name",
#   "password": "pwd",
#   "tenant": "tenant-guid"
# }
      # - name: Format Login Cred
      #   id: logincred
      #   run: |
      #     $cred = '{ 
      #       "appId": "${{secrets.APPID}}"
      #       "password": "${{secrets.SPPWD}}"
      #       "subscriptionId":  "${{secrets.SUBID}}"
      #       "tenant": "${{secrets.TENANT}}"
      #        }'
      #     echo "::set-output name=CRED::$($cred)" 

      # - run: echo ${{ steps.formatlogincred.outputs.CRED }}

      - name: az login
        run: |
          az login --service-principal -u "${{secrets.APPID}}" -p "${{secrets.SPPWD}}" -t "${{secrets.TENANT}}"
          az account set -s "${{secrets.SUBID}}"

      # - name: 'Login via Azure CLI'
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ steps.formatlogincred.outputs.CRED }}


      # Deploy to Azure Web apps DEV
      - name: 'Deploy Azure webapp to Dev'
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{ env.AZURE_WEBAPP_NAME }} # Replace with your app name
          package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}'

  DeploytoQA:
    if: github.ref == 'refs/heads/master'
    needs: DeploytoDev
    runs-on: windows-latest  
    environment:
      name: 'QA'
    env:
      AZURE_WEBAPP_NAME: 'tailspintoys-paaslab-1-site'
      AZURE_WEBAPP_PACKAGE_PATH: 'webproject'

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: webproject
          path: ${{env.AZURE_WEBAPP_PACKAGE_PATH}}
      - run: dir ${{env.AZURE_WEBAPP_PACKAGE_PATH}} -name 

      - name: az login
        run: |
          az login --service-principal -u "${{secrets.APPID}}" -p "${{secrets.SPPWD}}" -t "${{secrets.TENANT}}"
          az account set -s "${{secrets.SUBID}}"

      # Deploy to Azure Web apps QA
      - name: 'Deploy Azure webapp to QA'
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{ env.AZURE_WEBAPP_NAME }} # Replace with your app name
          package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}'

  DeploytoProd:
    needs: DeploytoQA
    runs-on: windows-latest  
    environment:
      name: 'Prod'
    env:
      AZURE_WEBAPP_NAME: 'tailspintoys-paaslab-2-site'
      AZURE_WEBAPP_PACKAGE_PATH: 'webproject'
      RG: 

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: webproject
          path: ${{env.AZURE_WEBAPP_PACKAGE_PATH}}
      - run: dir ${{env.AZURE_WEBAPP_PACKAGE_PATH}} -name 

      - name: az login
        run: |
          az login --service-principal -u "${{secrets.APPID}}" -p "${{secrets.SPPWD}}" -t "${{secrets.TENANT}}"
          az account set -s "${{secrets.SUBID}}"

      # Deploy to Azure Web apps Prod
      - name: 'Deploy Azure webapp to Prod'
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{ env.AZURE_WEBAPP_NAME }} 
          package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}'

