name: '1 - Terraform Plan & Apply'

on:
  workflow_dispatch:
  push:
    branches: [ '*' ]
    paths:
      - paaslab/terraform/**
      - .github/workflows/terraform-apply.yml
  pull_request:
    branches: [ master ]
    paths:
      - paaslab/terraform/**
      - .github/workflows/terraform-apply.yml

jobs:
  Plan:
    name: 'Plan'
    runs-on: ubuntu-latest
    environment:
        name: 'Plan'
    env:
      working-directory: 'paaslab/terraform'
      backend-path: 'backenddev.tfvars'
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory:  ${{env.working-directory}}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform 0.13.3
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.3

    # Initialize terraform.  Pass backend defaults in from ${{env.backend_path}} file
    # provide SP & SP Password as env variable
    - name: Terraform Init
      run: |
        terraform init \
        -backend-config ${{env.backend-path}} 
      env:
        ARM_CLIENT_ID: ${{secrets.APPID}}
        ARM_CLIENT_SECRET: ${{secrets.SPPWD}}
        ARM_SUBSCRIPTION_ID: ${{secrets.SUBID}}
        ARM_TENANT_ID: ${{secrets.TENANT}}

    # Checks that all Terraform configuration files adhere to a canonical format
    # Run will abort if files fail the format check
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      env:
        ARM_CLIENT_ID: ${{secrets.APPID}}
        ARM_CLIENT_SECRET: ${{secrets.SPPWD}}
        ARM_SUBSCRIPTION_ID: ${{secrets.SUBID}}
        ARM_TENANT_ID: ${{secrets.TENANT}}

  Apply:
    name: 'Apply'
    runs-on: ubuntu-latest
    needs: 'Plan'
    environment:
        name: 'Apply'
    env:
      working-directory: 'paaslab/terraform'
      backend-path: 'backenddev.tfvars'
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory:  ${{env.working-directory}}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform 0.13.3
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.3

    # Initialize terraform.  Pass backend defaults in from ${{env.backend_path}} file
    # provide SP & SP Password as env variable
    - name: Terraform Init
      run: |
        terraform init \
        -backend-config ${{env.backend-path}} 
      env:
        ARM_CLIENT_ID: ${{secrets.APPID}}
        ARM_CLIENT_SECRET: ${{secrets.SPPWD}}
        ARM_SUBSCRIPTION_ID: ${{secrets.SUBID}}
        ARM_TENANT_ID: ${{secrets.TENANT}}

    - name: Terraform Apply
      if: github.ref == 'refs/heads/master'  
      run: terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: ${{secrets.APPID}}
        ARM_CLIENT_SECRET: ${{secrets.SPPWD}}
        ARM_SUBSCRIPTION_ID: ${{secrets.SUBID}}
        ARM_TENANT_ID: ${{secrets.TENANT}}